//-----------------------------------------------------------------------------
// 部分分数分解
//-----------------------------------------------------------------------------
const lib = require('./lib');

//-----------------------------------------------------------------------------
// (1) 1/6 + 1/12 + 1/20 + 1/30 を部分分数分解する
//-----------------------------------------------------------------------------
function work01() 
{
  // 愚直に計算する関数
  const f1 = () => {
    return 1/6 + 1/12 + 1/20 + 1/30;
  }

  // 上式を部分分数分解すると
  // = 1/2*3 + 1/3*4 + 1/4*5 + 1/5*6
  // = (1/2 - 1/3) + (1/3 - 1/4) + (1/4 - 1/5) + (1/5 - 1/6)
  // 式を見やすく整理すると
  //   1/2 + 1/3 + 1/4 + 1/5
  // -      (1/3 + 1/4 + 1/5 + 1/6)
  // ------------------------------
  // 1/2 - 1/6
  const f2 = () => {
    return 1/2 - 1/6;
  }

  // f1() と f2() を表示(小数点誤差)
  console.log(`f1() = ${f1()}`);
  console.log(`f2() = ${f2()}`);
}

//-----------------------------------------------------------------------------
// (2) Σ{k=1}{n} 1/k(k+2)
//-----------------------------------------------------------------------------
function work02() 
{
  // 愚直に計算する関数
  const f1 = (n) => {
    return sum(1, n, (n) => 1 / (n*(n+2)) );
  }

  // Σの式を部分分数分解すると
  // 1/k - 1/k+2 = 2/k(k+2) となるので 1/2を掛ければ元の式に戻る
  // 
  // また、この式をk=1からnに向かって展開すると
  //   1 + 1/2 + 1/3 + 1/4 + ... + 1/n
  // -          (1/3 + 1/4 + ... + 1/n + 1/n+1 + 1/n+2)
  // ---------------------------------------------------
  // (1 + 1/2 - 1/n+1 - 1/n+2) / 2
  const f2 = (n) => {
    return (1 + 1/2 - 1/(n+1) - 1/(n+2)) / 2;
  }

  // f1() と f2() を表示(小数点誤差)
  console.log(`f1() = ${f1(10)}`);
  console.log(`f2() = ${f2(10)}`);
}

//-----------------------------------------------------------------------------
// (3) Σ{k=1}{n} 1/√(k+1) + √k
//-----------------------------------------------------------------------------
function work03() 
{
  // 愚直に計算する関数
  const f1 = (n) => {

    const f = (n) => {
      return 1 / (Math.sqrt(n+1) + Math.sqrt(n));
    }

    return sum(1, n, f);
  }

  // Σの式は分母にルートが含まれるので有利化をすると
  // √(k+1) - √k となり、k=1～nに向かって式を書き下すと
  //
  //          √2 + √3 + √4 + ... √n+1
  // - (√1 + √2 + √3 + ... √n)
  // ------------------------------------
  // √(n+1) - 1
  const f2 = (n) => {
    return Math.sqrt(n+1) - 1;
  }

  // f1() と f2() を表示(小数点誤差)
  console.log(`f1() = ${f1(10)}`);
  console.log(`f2() = ${f2(10)}`);  
}

//-----------------------------------------------------------------------------
// (4) Σ{k=1}{n} k(k+1)(k+2)
//-----------------------------------------------------------------------------
function work04() 
{
  // 愚直に計算する関数
  const f1 = (n) => {
    return lib.sigma(1, n, (n) => n * (n+1) * (n+2));
  }

  // Σの式は以下の用に変形できる(実際に解けば k(k+1)(k+2)に戻る)
  // (k(k+1)(k+2)(k+3))/4 - ((k-1)k(k+1)(k+2))/4)
  //
  //               1*2*3*4 + 2*3*4*5 + 3*4*5*6 + ... + (n-1)n(n+1)(n+2) + n(n+1)(n+2)(n+3)
  // - (0*1*2*3* + 1*2*3*4 + 2*3*4*5 + 3*4*5*6 + ... + (n-1)n(n+1)(n+2)
  //--------------------------------------------------------------------
  // (n(n+1)(n+2)(n+3)) / 4
  const f2 = (n) => {
    return (n * (n+1) * (n+2) * (n+3)) / 4;
  }

  // f1() と f2() を表示(小数点誤差)
  console.log(`f1() = ${f1(10)}`);
  console.log(`f2() = ${f2(10)}`);  
}

work04();