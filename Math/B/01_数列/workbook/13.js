//-----------------------------------------------------------------------------
// Sn → an関係式
//-----------------------------------------------------------------------------
// 初項から第n項までの和 Sn = 式 から 数列の一般項を求める問題。
// a(n) = S(n) - S(n-1) ※ (n <= 2) を用いるパターン

//-----------------------------------------------------------------------------
// (1) 初項から第n項までの和が S(n) = n^2+2nで与えられる数列の一般項a(n)を求めなさい
//-----------------------------------------------------------------------------
function work01() {

  // S(n)を定義する
  const S = (n) => {
    return (n * n) + (2 * n);
  }

  // [理屈] 一般項はS(n)-S(n-1)で求められるので以下で求められるはず
  // ただし(2 <= n)
  const t = (n) => {
    return S(n) - S(n-1);
  }

  // [計算] 実際に S(n) - S(n-1) を解くと 2n + 1になるので、一般項 a(n) = 2n + 1
  // ただし(2 <= n)
  const a = (n) => {
    return 2 * n + 1;
  }

  // S(1)とa(1)が一致すれば (1 <= n)で成り立つ
  const s1 = S(1);
  const a1 = a(1);
  console.log(`S(1) = ${s1}`);
  console.log(`a(1) = ${a1}`);
  console.log(`(1 <= n) ${s1 === a1? "OK" : "NG"}`);

  // t(n)とa(n)で1～10項を求めてみる
  for(let n = 1; n <= 10; ++n) {
    console.log(t(n), a(n));
  }
}

//-----------------------------------------------------------------------------
// (2) 初項から第n項までの和が S(n) = n^3-3nで与えられる数列の一般項a(n)を求めなさい
//-----------------------------------------------------------------------------
function work02() {

  // S(n)を定義する
  const S = (n) => {
    return (n * n * n) - (3 * n);
  }

  // [理屈] 一般項はS(n) - S(n-1)で求められる
  // ただし(2 <= n)
  const t = (n) => {
    return S(n) - S(n-1);
  }

  // [計算] 実際に S(n) - S(n-1) を解くと 3n^2 -3n - 2 になるので
  // ただし(2 <= n)
  const a = (n) => {
    return (3 * (n * n)) - (3 * n) - 2;
  }

  // S(1)とa(1)が一致すれば (1 <= n)で成り立つ
  const s1 = S(1);
  const a1 = a(1);
  console.log(`S(1) = ${s1}`);
  console.log(`a(1) = ${a1}`);
  console.log(`(1 <= n) ${s1 === a1? "OK" : "NG"}`);

  // t(n)とa(n)を比較してチェック
  for(let n = 1; n <=10; ++n) {
    console.log(t(n), a(n));
  }
}

//-----------------------------------------------------------------------------
// (3) 初項から第n項までの和が S(n) = 2^nで与えられる数列の一般項a(n)を求めなさい
//-----------------------------------------------------------------------------
function work03() {

  // S(n)を定義
  const S = (n) => {
    return Math.pow(2, n);
  }

  // [理屈] 一般項は S(n) - S(n-1)で求められる
  // ただし(2 <= n)
  const t = (n) => {
    return S(n) - S(n-1);
  }

  // [計算] 実際に S(n) - S(n-1) を解くと 2^{n-1} になるので
  // ただし(2 <= n)
  const a = (n) => {
    return Math.pow(2, n-1);
  }

  // S(1)とa(1)が一致すれば (1 <= n)でも成り立つ
  const s1 = S(1);
  const a1 = a(1);
  console.log(`S(1) = ${s1}`);
  console.log(`a(1) = ${a1}`);
  console.log(`(1 <= n) ${s1 === a1? "OK" : "NG"}`);

  // t(n)とa(n)を比較してチェック
  for(let n = 1; n <=10; ++n) {
    console.log(t(n), a(n));
  }  
}

//-----------------------------------------------------------------------------
// (4) 初項から第n項までの和が S(n) = n^2+5で与えられる数列の一般項a(n)を求めなさい
//-----------------------------------------------------------------------------
function work04() 
{
  // S(n)を定義
  const S = (n) => {
    return Math.pow(n, 2) + 5;
  }

  // [理屈] 一般項は S(n) - S(n-1)で求められる
  // ただし(2 <= n)
  const t = (n) => {
    return S(n) - S(n-1);
  }

  // [計算] 実際に S(n) - S(n-1) を解くと 2n-1 になるので
  // ただし(2 <= n)
  const a = (n) => {
    return 2 * n - 1;
  }

  // S(1)とa(1)が一致すれば (1 <= n)でも成り立つ
  const s1 = S(1);
  const a1 = a(1);
  console.log(`S(1) = ${s1}`);
  console.log(`a(1) = ${a1}`);
  console.log(`(1 <= n) ${s1 === a1? "OK" : "NG"}`);

  // t(n)とa(n)を比較してチェック
  for(let n = 1; n <=10; ++n) {
    console.log(t(n), a(n));
  }  
}

work04();