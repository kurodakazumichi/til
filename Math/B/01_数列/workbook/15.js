//-----------------------------------------------------------------------------
// 等差・等比型
//
// 問題を解く流れ
// ・ 和 Sを書き下し、等比数列の等比を読み解く
// ・ S - rSを解く
//-----------------------------------------------------------------------------
const lib = require('./lib');

//-----------------------------------------------------------------------------
// (1) 次の和を求めなさい。
// 1 + 3x + 5x^2 + 7x^3 + ... + (2n-1)x^{n-1}
// ただし x != 1 とする。
//-----------------------------------------------------------------------------
function work01() 
{
  // ①数列は等差×等比の形になっており、公比は3

  // ② S - xSを計算する
  //
  //   S    = 1 + 3x + 5x^2 + 7x^3 + ... + (2n-1)x^{n-1}
  // - xS   =     1x + 3x^2 + 5x^3 + ... + (2n-3)x^{n-1} + (2n-1)x^n 
  //---------------------------------------------------------------
  // S - xS = 1 + 2x + 2x^2 + 2x^3 + ... + 2x^{n-1} - (2n-1)x^n
  //          　  ---------------------------------
  //              初項2x、公比xの等比数列の和、項数は最初の項を除くのでn-1
  
  // ③ S - 3SをSについて解く
  // S = 1 + x - (2n+1)x^n + (2n-1)x^{n+1} / (1-x)^2
  
  // 上式より和 S(n, x)を定義する
  const S = (n, x) => {
    const a = (1 + x) - (2*n+1) * Math.pow(x, n) + (2*n-1) * Math.pow(x, n+1);
    const b = Math.pow(1-x, 2);
    return a/b;
  }

  // 答え合わせ
  // Σ{k=1}{n} (2n-1)^x{n-1}を求める関数をT(n, x)と定義しておく
  const T = (n, x) => {
    return lib.sigma(1, n, (n) => {
      return (2*n - 1) * Math.pow(x, n-1)
    });
  }

  // x = 2として、第10項までの和 T(10, 2)とS(10, 2)を表示
  console.log(`T(10, 2) = ${T(10, 2)}`);
  console.log(`S(10, 2) = ${S(10, 2)}`);
}

//-----------------------------------------------------------------------------
// (2) 次の和を求めなさい。
// Σ{k=1}{n} k3^k
//-----------------------------------------------------------------------------
function work02() 
{
  // ① 数列の和をSとして書き下す
  // S = 1*3^1 + 2*3^2 + 3*3^3 + 4*3^4 + ... n*3^n
  // 等差×等比の形になっており、公比は3
  
  // ② S - 3Sを計算する
  // S      = 1*3^1 + 2*3^2 + 3*3^3 + 4*3^4 + ... + n*3^n
  // 3S     =         1*3^2 + 2*3^3 + 3*3^4 + ... + (n-1)*3^{n} + n*3^{n+1} 
  // --------------------------------------------------------------------
  // S - 3S = 3 + 3^2 + 3^3 + 3^4 + ... 3^n - n*3^{n+1}
  //          -----------------------------
  //          初項3、公比3の等比数列の和
  
  // ③ S - 3SをSについて解く
  // S = (2n-1)3^{n+1}+3 / 4
  
  // 上式より和 S(n)を定義する
  const S = (n) => {
    const a = (2*n-1) * Math.pow(3, n+1) + 3;
    const b = 4;
    return a/b;
  }

  // 答え合わせ
  // Σ{k=1}{n} k3^kを求める関数をT(n)と定義する
  const T = (n) => {
    return lib.sigma(1, n, (n) => n * Math.pow(3, n));
  }

  // 第10項までの和 T(10)とS(10)を表示
  console.log(`T(10) = ${T(10)}`);
  console.log(`S(10) = ${S(10)}`);  
}

work02();