//-----------------------------------------------------------------------------
// 漸化式と一般項(階差形)
//-----------------------------------------------------------------------------
const lib = require('./lib');

//-----------------------------------------------------------------------------
// (1)
// a(1) = 3
// a(n+1) = a(n) + 2
// のとき、数列{a(n)}の一般項を求めて下さい。
//
//-----------------------------------------------------------------------------
function work01() 
{
  // Point
  // a(n+1) - a(n) = 2なので、初項3、公差2の等差数列ということがわかる。

  // 等差数列の一般項の形に当てはめて
  // a(n) = 2n+1となる
  const a = (n) => {
    return 2*n + 1;
  }

  // 答え合わせ
  // a(n+1) = a(n) + 2 を以下のように変形し、再帰関数としてt(n)を定義
  // a(n) = a(n-1) + 2
  const t = (n) => 
  {
    if (n == 1) {
      return 3;
    }

    return t(n-1) + 2;
  }

  // 第10項を表示
  console.log(`t(10) = ${t(10)}`);
  console.log(`a(10) = ${a(10)}`);
}

//-----------------------------------------------------------------------------
// (2)
// a(1) = 2
// a(n+1) = a(n) + 3
// のとき、数列{a(n)}の一般項を求めて下さい。
//-----------------------------------------------------------------------------
function work02() 
{
  // Point
  // a(n+1) - a(n) = 3 なので、初項2、公差3の等差数列ということがわかる。

  // 等差数列の一般項の形に当てはめて
  // a(n) = 3n-1となる
  const a = (n) => {
    return 3*n - 1;
  }

  // 答え合わせ
  // a(n+1) = a(n) + 3 を以下のように変形し、再帰関数としてt(n)を定義
  // a(n) = a(n-1) + 3
  const t = (n) => 
  {
    if (n == 1) {
      return 2;
    }

    return t(n-1) + 3;
  }

  // 第10項を表示
  console.log(`t(10) = ${t(10)}`);
  console.log(`a(10) = ${a(10)}`);
}

//-----------------------------------------------------------------------------
// (2)
// a(1) = 1
// a(n+1) = a(n) + n - 2
// のとき、数列{a(n)}の一般項を求めて下さい。
//-----------------------------------------------------------------------------
function work03() 
{
  // Point
  // a(n+1) - a(n) = n - 2、右辺がnの式になっている場合
  // a(1) + Σ{k=1}^{n-1} n-2 で求まる。 
  // これを計算すると
  // a(n) = (n-2)(n-3)/2
  const a = (n) => {
    return (n - 2) * (n - 3) / 2;
  }

  // 答え合わせ
  // 漸化式より、再帰関数としてt(n)を定義
  // a(n) = a(n-1) + n - 2
  const t = (n) => 
  {
    if (n == 1) {
      return 1;
    }

    return t(n-1) + n - 2;
  }

  // n = 1の時にa(1) = 1が成り立つかどうかは確認が必要
  if (a(1) === 1) {
    console.log("OK");
  }

  // 第10項を表示
  console.log(`t(10) = ${t(10)}`);
  console.log(`a(10) = ${a(10)}`);
}